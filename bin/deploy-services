#!/bin/bash
# create back end services for Harmony

env_save=$(export -p)
set -a
source "env-defaults"
source ".env"
set +a
eval "$env_save"


current_context=$(kubectl config current-context)
if [ "$current_context" != "docker-desktop" ] && [ "$current_context" != "minikube" ]; then
  echo 'ERROR: Attempting to use a non-local k8s context while deploying to a development environment.'
  echo "$current_context"
  exit 1
fi

. ./bin/create-k8s-config-maps-and-secrets

# create the query-cmr service
file="tasks/service-runner/config/query-cmr-sidecar.yaml"
if [ ! -f "$file" ]; then
  echo "query-cmr-sidecar.yml was not found."
  exit 1
fi
envsubst < $file | kubectl apply -f - -n harmony

# create the other services
file="tasks/service-runner/config/service-template.yaml"
for service in ${LOCALLY_DEPLOYED_SERVICES//,/ }
do
  # set up enviornment variables for service
  export SERVICE_NAME=${service}
  var_prefix=`echo $service | tr 'a-z' 'A-Z' | tr '-' '_'`
  declare ${var_prefix}_IMAGE
  varname=${var_prefix}_IMAGE
  export SERVICE_IMAGE=${!varname}
  declare ${var_prefix}_REQUESTS_CPU
  varname=${var_prefix}_REQUESTS_CPU
  export SERVICE_REQUESTS_CPU=${!varname}
  declare ${var_prefix}_REQUESTS_MEMORY
  varname=${var_prefix}_REQUESTS_MEMORY
  export SERVICE_REQUESTS_MEMORY=${!varname}
  declare ${var_prefix}_LIMITS_CPU
  varname=${var_prefix}_LIMITS_CPU
  export SERVICE_LIMITS_CPU=${!varname}
  declare ${var_prefix}_LIMITS_MEMORY
  varname=${var_prefix}_LIMITS_MEMORY
  export SERVICE_LIMITS_MEMORY=${!varname}
  declare ${var_prefix}_WORKING_DIR
  varname=${var_prefix}_WORKING_DIR
  export SERVICE_WORKING_DIR=${!varname}
  declare ${var_prefix}_INVOCATION_ARGS
  varname=${var_prefix}_INVOCATION_ARGS
  export SERVICE_INVOCATION_ARGS=${!varname}

  envsubst < $file | kubectl apply -f - -n harmony
done
